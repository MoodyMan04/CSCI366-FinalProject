UML:
- Database Manager
	o Attributes
		 Connection: Connection
	o Methods
		 + GetConnection(): Connection
- Book
	o Attributes
		 Book_id: int
		 Title: String
		 Publisher: String
		 Language: String
		 Date_Published: DateTime
	o Methods
		 + GetBookAll(): List<Book>
		 + GetBookByTitle(String title): List<Book>
		 + GetBookByLanguage(String lang): List<Book>
		 + GetBookByAuthor(String authorLastname): List<Book>
		 + GetBookByClass(String className): List<Book>
		 + GetBookByRequiredClass(String className): List<Book>
		 + GetBookByID(int id): Book
		 + GetBookCountAll(): int
		 + GetCurrentlyCheckedOutUser(): List<(Book, DateTime)>
		 + GetCheckedOutALl(): List<CheckedOut>
			• Check isAdmin of current logged in user
		 + GetCurrentlyCheckedOutAll(): List<CheckedOut>
			• Check isAdmin of current logged in user
		 + GetAuthoredByAll(): List<AuthoredBy>
			• Check isAdmin of current logged in user
		 + GetAssociatedWithAll(): List<AssociatedWith>
			• Check isAdmin of current logged in user
		 + AddAssociatedWith(int bookID, int classID, bool is_required): void
			• Check isAdmin of current logged in user
		 + UpdateAssociatedWith(int bookID, int classID, bool is_required): void
			• Check isAdmin of current logged in user
		 + DeleteAssociatedWith(int bookID, int classID): void
			• Check isAdmin of current logged in user
		 + AddAuthoredBy(int bookID, int authorID): void
			• Check isAdmin of current logged in user
		 + DeleteAuthoredBy(int bookID, int authorID): void
			• Check isAdmin of current logged in user
		 + AddBook(String title, String publisher, String language, DateTime date_published): void
			• Check isAdmin of current logged in user
		 + DeleteBook(int id): void
			• Check isAdmin of current logged in user
		 + UpdateBook(int id, Book book): void
			• Check isAdmin of current logged in user
		(DOES NOT USE DB)  + SetReturnDate(DateTime date): void
			• Check isAdmin of current logged in user
		 CheckOutBook(int bookID): void
		 ReturnBook(int bookID): void
- Class
	o Attributes
		 Class_id: int
		 Class_name: String
		 Class_description: String
	o Methods
		 + GetClassAll(): List<Class>
		 + AddClass(String class_name, String class_desc): void
			• Check isAdmin of current logged in user
		 + UpdateClass(int id, Class class): void
			• Check isAdmin of current logged in user		
		 + DeleteClass(int id): void
			• Check isAdmin of current logged in user
- Author
	o Attributes
		 Author_id: int
		 Firstname: String
		 Lastname: String
	o Methods
		(DONE)  + GetAuthorAll(): List<Author>
		 + AddAuthor(String firstname, String lastname): void
			• Check isAdmin of current logged in user
		 + UpdateAuthor(int id, Author author): void
			• Check isAdmin of current logged in user
		 + DeleteAuthor(int id): void
			• Check isAdmin of current logged in user
- User
	o Attributes
		 User_id: int
		 Username: String
		 Password: String
		 Firstname: String
		 Lastname: String
		 Email: String
		 Is_admin: boolean
	o Methods
		 GetUserAll(): List<User>
			• Check isAdmin of current logged in user
		 GetCurrentUserInfo(): User
		 GetCurrentUserID(): int
		 AddUser(String username, String password, String firstname, String lastname, String email Boolean is_admin): void
			• Check isAdmin of current logged in user
		 UpdateCurrentUserInfo(int id, String username, String password, String firstname, String lastname, String email): void
		 UpdateUserInfo(int id, User user): void
			• Check isAdmin of current logged in user
		 DeleteUser(int id): void
			• Check isAdmin of current logged in user

NOTE: Although the methods will be divided into their respective classes, the methods will be accessed by either the User page of Admin page by calling the appropriate classes method.
